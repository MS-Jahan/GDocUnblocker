name: Build and Release APKs

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.22.2'

    - name: Install dependencies
      run: flutter pub get

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Decode keystore file
      run: |
        echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > my-release-key.jks

    - name: Extract version from pubspec.yaml
      id: extract_version
      run: |
        version=$(grep 'version:' pubspec.yaml | sed 's/version: \(.*\)/\1/')
        echo "VERSION=${version}" >> $GITHUB_ENV

    - name: Build APKs for different architectures
      run: |
        flutter build apk --release

    - name: Zipalign APKs
      run: |
        ZIPALIGN=$(find $ANDROID_HOME/build-tools -name zipalign | sort -r | head -n 1)
        for apk in build/app/outputs/flutter-apk/*-release.apk; do
          aligned_apk="${apk%-release.apk}-aligned.apk"
          "$ZIPALIGN" -v 4 "$apk" "$aligned_apk"
        done

    - name: Sign APKs
      run: |
        for apk in build/app/outputs/flutter-apk/*-aligned.apk; do
          apksigner sign --ks my-release-key.jks --ks-key-alias "${{ secrets.KEY_ALIAS }}" --ks-pass pass:"${{ secrets.KEYSTORE_PASSWORD }}" --key-pass pass:"${{ secrets.KEY_PASSWORD }}" "$apk"
        done

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload APKs
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/app/outputs/flutter-apk/app-aligned.apk
        asset_name: GDocUnblocker-universal-release-${{ env.VERSION }}.apk
        asset_content_type: application/vnd.android.package-archive

    # - name: Upload APKs
    #   run: |
    #     for apk in build/app/outputs/flutter-apk/*-aligned.apk; do
    #       echo "Uploading $apk"
    #       curl -X POST \
    #         -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
    #         -H "Content-Type: multipart/form-data" \
    #         -F "file=@$apk" \
    #         "https://uploads.github.com/repos/MS-Jahan/GDocUnblocker/releases/${{ steps.create_release.outputs.release_id }}/assets?name=$(basename $apk)"
    #     done

    # - name: Upload APKs (arm64)
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: build/app/outputs/flutter-apk/app-arm64-release-aligned.apk
    #     asset_name: app-arm64-release-aligned-${{ env.VERSION }}.apk
    #     asset_content_type: application/vnd.android.package-archive

    # - name: Upload APKs (x64)
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: build/app/outputs/flutter-apk/app-x64-release-aligned.apk
    #     asset_name: app-x64-release-aligned-${{ env.VERSION }}.apk
    #     asset_content_type: application/vnd.android.package-archive
